{"ast":null,"code":"import _regeneratorRuntime from \"/projects/library-app/client/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(incrementAsync),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchIncrementAsync);\n\nimport { put, takeEvery } from 'redux-saga/effects';\nexport function incrementAsync() {\n  return _regeneratorRuntime.wrap(function incrementAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return delay(1000);\n\n        case 2:\n          _context.next = 4;\n          return put({\n            type: 'INCREMENT'\n          });\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this);\n} // Our watcher Saga: spawn a new incrementAsync task on each INCREMENT_ASYNC\n\nexport function watchIncrementAsync() {\n  return _regeneratorRuntime.wrap(function watchIncrementAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery('INCREMENT_ASYNC', incrementAsync);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, this);\n}","map":{"version":3,"sources":["/projects/library-app/client/src/sagas.js"],"names":["incrementAsync","watchIncrementAsync","put","takeEvery","delay","type"],"mappings":";;;;yBAEiBA,c;;;yBAMAC,mB;;AARjB,SAASC,GAAT,EAAcC,SAAd,QAA+B,oBAA/B;AAEA,OAAO,SAAUH,cAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,iBAAMI,KAAK,CAAC,IAAD,CAAX;;AADK;AAAA;AAEL,iBAAMF,GAAG,CAAC;AAAEG,YAAAA,IAAI,EAAE;AAAR,WAAD,CAAT;;AAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAKP;;AACA,OAAO,SAAUJ,mBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,iBAAME,SAAS,CAAC,iBAAD,EAAoBH,cAApB,CAAf;;AADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { put, takeEvery } from 'redux-saga/effects'\r\n\r\nexport function* incrementAsync() {\r\n  yield delay(1000)\r\n  yield put({ type: 'INCREMENT' })\r\n}\r\n\r\n// Our watcher Saga: spawn a new incrementAsync task on each INCREMENT_ASYNC\r\nexport function* watchIncrementAsync() {\r\n  yield takeEvery('INCREMENT_ASYNC', incrementAsync)\r\n}"]},"metadata":{},"sourceType":"module"}