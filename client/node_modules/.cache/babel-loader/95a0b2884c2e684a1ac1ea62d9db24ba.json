{"ast":null,"code":"import _objectSpread from \"/projects/library-app/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { ADD_BOOK, SEARCH_BOOK } from '../constants';\nvar initialState = {\n  bookList: [{\n    id: Math.random(),\n    bookName: \"Theory of Computation\",\n    bookAuthor: \"James\",\n    yearOfRelease: \"2018-11-11\"\n  }, {\n    id: Math.random(),\n    bookName: \"James Bond\",\n    author: \"Andrew\",\n    yearOfRelease: \"2018-11-11\"\n  }, {\n    id: Math.random(),\n    bookName: \"Santa claus\",\n    bookAuthor: \"James\",\n    yearOfRelease: \"2018-11-11\"\n  }, {\n    id: Math.random(),\n    bookName: \"Santa claus\",\n    bookAuthor: \"James\",\n    yearOfRelease: \"2018-11-11\"\n  }],\n  search: []\n};\nexport var reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_BOOK:\n      console.log(action.type, action.payload);\n      var bookItem = action.payload;\n      var bookList = state.bookList;\n      var newBookList = bookList.concat(bookItem);\n      return _objectSpread({}, state, {\n        bookList: newBookList\n      });\n      break;\n      Case;\n\n    case SEARCH_BOOK:\n      console.log(action.type, action.payload);\n    //                            let search = action.payload;\n    //                            const newBookList = state.bookList.filter((val) => val.includes(search));\n    //                            return {...state, search, bookList: newBookList};\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/projects/library-app/client/src/reducers/index.js"],"names":["ADD_BOOK","SEARCH_BOOK","initialState","bookList","id","Math","random","bookName","bookAuthor","yearOfRelease","author","search","reducer","state","action","type","console","log","payload","bookItem","newBookList","concat","Case"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,cAAtC;AAEA,IAAMC,YAAY,GAAG;AACjBC,EAAAA,QAAQ,EAAC,CAAC;AACRC,IAAAA,EAAE,EAACC,IAAI,CAACC,MAAL,EADK;AAERC,IAAAA,QAAQ,EAAE,uBAFF;AAGRC,IAAAA,UAAU,EAAC,OAHH;AAIRC,IAAAA,aAAa,EAAC;AAJN,GAAD,EAKP;AACAL,IAAAA,EAAE,EAACC,IAAI,CAACC,MAAL,EADH;AAEAC,IAAAA,QAAQ,EAAE,YAFV;AAGAG,IAAAA,MAAM,EAAC,QAHP;AAIAD,IAAAA,aAAa,EAAC;AAJd,GALO,EAUP;AACAL,IAAAA,EAAE,EAACC,IAAI,CAACC,MAAL,EADH;AAEAC,IAAAA,QAAQ,EAAE,aAFV;AAGAC,IAAAA,UAAU,EAAC,OAHX;AAIAC,IAAAA,aAAa,EAAC;AAJd,GAVO,EAeP;AACAL,IAAAA,EAAE,EAACC,IAAI,CAACC,MAAL,EADH;AAEAC,IAAAA,QAAQ,EAAE,aAFV;AAGAC,IAAAA,UAAU,EAAC,OAHX;AAIAC,IAAAA,aAAa,EAAC;AAJd,GAfO,CADQ;AAuBjBE,EAAAA,MAAM,EAAC;AAvBU,CAArB;AA0BA,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAA+B;AAAA,MAA9BC,KAA8B,uEAAxBX,YAAwB;AAAA,MAAXY,MAAW;;AAClD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKf,QAAL;AAAkBgB,MAAAA,OAAO,CAACC,GAAR,CAAYH,MAAM,CAACC,IAAnB,EAAyBD,MAAM,CAACI,OAAhC;AACE,UAAIC,QAAQ,GAAGL,MAAM,CAACI,OAAtB;AADpB,UAE0Bf,QAF1B,GAEuCU,KAFvC,CAE0BV,QAF1B;AAGoB,UAAMiB,WAAW,GAAGjB,QAAQ,CAACkB,MAAT,CAAgBF,QAAhB,CAApB;AACA,+BAAWN,KAAX;AAAkBV,QAAAA,QAAQ,EAAEiB;AAA5B;AACA;AACpBE,MAAAA,IAAI;;AACJ,SAAKrB,WAAL;AAAoBe,MAAAA,OAAO,CAACC,GAAR,CAAYH,MAAM,CAACC,IAAnB,EAAyBD,MAAM,CAACI,OAAhC;AAC5B;AACA;AACA;;AACQ;AAAQ,aAAOL,KAAP;AAZZ;AAcH,CAfM","sourcesContent":["import { ADD_BOOK, SEARCH_BOOK } from '../constants'; \r\n\r\nconst initialState = {\r\n    bookList:[{\r\n      id:Math.random(), \r\n      bookName: \"Theory of Computation\",\r\n      bookAuthor:\"James\",\r\n      yearOfRelease:\"2018-11-11\"\r\n    },{\r\n      id:Math.random(), \r\n      bookName: \"James Bond\",\r\n      author:\"Andrew\",\r\n      yearOfRelease:\"2018-11-11\",\r\n    },{\r\n      id:Math.random(), \r\n      bookName: \"Santa claus\",\r\n      bookAuthor:\"James\",\r\n      yearOfRelease:\"2018-11-11\"\r\n    },{\r\n      id:Math.random(), \r\n      bookName: \"Santa claus\",\r\n      bookAuthor:\"James\",\r\n      yearOfRelease:\"2018-11-11\"\r\n    },\r\n    ],\r\n    search:[],\r\n}\r\n\r\nexport const reducer = (state=initialState,action) => {\r\n    switch(action.type){\r\n        case ADD_BOOK:    console.log(action.type, action.payload);\r\n                            let bookItem = action.payload;\r\n                            let { bookList } = state;\r\n                            const newBookList = bookList.concat(bookItem);\r\n                            return {...state, bookList: newBookList};\r\n                            break;\r\n        Case\r\n        case SEARCH_BOOK:   console.log(action.type, action.payload);\r\n//                            let search = action.payload;\r\n//                            const newBookList = state.bookList.filter((val) => val.includes(search));\r\n//                            return {...state, search, bookList: newBookList};\r\n        default:return state;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}